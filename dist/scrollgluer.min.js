!function(t){"use strict";function n(t,n,l){function r(t){var n=t;return{getValue:function(){return n},setValue:function(t){n=t}}}function e(t,n){return{getValue:function(){return t(n)},setValue:function(){}}}function c(t,n,l){return{getValue:function(){return t(l)},setValue:function(r){r!==t(l)&&l.$apply(function(){n(l,r)})}}}if(""!==n){var o=t(n);return void 0!==o.assign?c(o,o.assign,l):e(o,l)}return r(!0)}function l(t,l,r){t.directive(l,["$parse","$window","$timeout",function(t,e,c){return{priority:1,restrict:"A",link:function(o,i,u){function s(){f.getValue()&&!r.isAttached(a)&&r.scroll(a)}var f=n(t,u[l],o),a=i[0];o.$watch(s),c(s,0,!1),e.addEventListener("resize",s,!1),i.bind("scroll",function(){f.setValue(r.isAttached(a))})}}}])}var r={isAttached:function(t){return t.scrollTop+t.clientHeight+1>=t.scrollHeight},scroll:function(t){t.scrollTop=t.scrollHeight}},e={isAttached:function(t){return t.scrollTop<=1},scroll:function(t){t.scrollTop=0}},c={isAttached:function(t){return t.scrollLeft+t.clientWidth+1>=t.scrollWidth},scroll:function(t){t.scrollLeft=t.scrollWidth}},o={isAttached:function(t){return t.scrollLeft<=1},scroll:function(t){t.scrollLeft=0}},i=t.module("ngScrollGluer",[]);l(i,"scrollGlue",r),l(i,"scrollGlueTop",e),l(i,"scrollGlueBottom",r),l(i,"scrollGlueLeft",o),l(i,"scrollGlueRight",c)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcm9sbGdsdWVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJjcmVhdGVBY3RpdmF0aW9uU3RhdGUiLCIkcGFyc2UiLCJhdHRyIiwic2NvcGUiLCJ1bmJvdW5kU3RhdGUiLCJpbml0VmFsdWUiLCJhY3RpdmF0ZWQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwidmFsdWUiLCJvbmVXYXlCaW5kaW5nU3RhdGUiLCJnZXR0ZXIiLCJ0d29XYXlCaW5kaW5nU3RhdGUiLCJzZXR0ZXIiLCIkYXBwbHkiLCJ1bmRlZmluZWQiLCJhc3NpZ24iLCJjcmVhdGVEaXJlY3RpdmUiLCJtb2R1bGUiLCJhdHRyTmFtZSIsImRpcmVjdGlvbiIsImRpcmVjdGl2ZSIsIiR3aW5kb3ciLCIkdGltZW91dCIsInByaW9yaXR5IiwicmVzdHJpY3QiLCJsaW5rIiwiJGVsIiwiYXR0cnMiLCJzY3JvbGxJZkdsdWVkIiwiYWN0aXZhdGlvblN0YXRlIiwiaXNBdHRhY2hlZCIsImVsIiwic2Nyb2xsIiwiJHdhdGNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJpbmQiLCJib3R0b20iLCJzY3JvbGxUb3AiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJ0b3AiLCJyaWdodCIsInNjcm9sbExlZnQiLCJjbGllbnRXaWR0aCIsInNjcm9sbFdpZHRoIiwibGVmdCJdLCJtYXBwaW5ncyI6IkNBWUMsU0FBVUEsR0FDVCxZQUVBLFNBQVNDLEdBQXNCQyxFQUFRQyxFQUFNQyxHQUMzQyxRQUFTQyxHQUFhQyxHQUNwQixHQUFJQyxHQUFZRCxDQUVoQixRQUNFRSxTQUFVLFdBQ1IsTUFBT0QsSUFHVEUsU0FBVSxTQUFVQyxHQUNsQkgsRUFBWUcsSUFLbEIsUUFBU0MsR0FBbUJDLEVBQVFSLEdBQ2xDLE9BQ0VJLFNBQVUsV0FDUixNQUFPSSxHQUFPUixJQUdoQkssU0FBVSxjQUlkLFFBQVNJLEdBQW1CRCxFQUFRRSxFQUFRVixHQUMxQyxPQUNFSSxTQUFVLFdBQ1IsTUFBT0ksR0FBT1IsSUFHaEJLLFNBQVUsU0FBVUMsR0FDZEEsSUFBVUUsRUFBT1IsSUFDbkJBLEVBQU1XLE9BQU8sV0FDWEQsRUFBT1YsRUFBT00sT0FPeEIsR0FBYSxLQUFUUCxFQUFhLENBQ2YsR0FBSVMsR0FBU1YsRUFBT0MsRUFFcEIsT0FBc0JhLFVBQWxCSixFQUFPSyxPQUNGSixFQUFtQkQsRUFBUUEsRUFBT0ssT0FBUWIsR0FFMUNPLEVBQW1CQyxFQUFRUixHQUdwQyxNQUFPQyxJQUFhLEdBSXhCLFFBQVNhLEdBQWdCQyxFQUFRQyxFQUFVQyxHQUN6Q0YsRUFBT0csVUFBVUYsR0FDZixTQUFVLFVBQVcsV0FFckIsU0FBVWxCLEVBQVFxQixFQUFTQyxHQUN6QixPQUNFQyxTQUFVLEVBQ1ZDLFNBQVUsSUFDVkMsS0FBTSxTQUFVdkIsRUFBT3dCLEVBQUtDLEdBSTFCLFFBQVNDLEtBQ0hDLEVBQWdCdkIsYUFBZWEsRUFBVVcsV0FBV0MsSUFDdERaLEVBQVVhLE9BQU9ELEdBTHJCLEdBQUlGLEdBQWtCOUIsRUFBc0JDLEVBQVEyQixFQUFNVCxHQUFXaEIsR0FDakU2QixFQUFLTCxFQUFJLEVBUWJ4QixHQUFNK0IsT0FBT0wsR0FFYk4sRUFBU00sRUFBZSxHQUFHLEdBRTNCUCxFQUFRYSxpQkFBaUIsU0FBVU4sR0FBZSxHQUVsREYsRUFBSVMsS0FBSyxTQUFVLFdBQ2pCTixFQUFnQnRCLFNBQVNZLEVBQVVXLFdBQVdDLFdBUTFELEdBQUlLLElBQ0ZOLFdBQVksU0FBVUMsR0FFcEIsTUFBT0EsR0FBR00sVUFBWU4sRUFBR08sYUFBZSxHQUFLUCxFQUFHUSxjQUdsRFAsT0FBUSxTQUFVRCxHQUNoQkEsRUFBR00sVUFBWU4sRUFBR1EsZUFJbEJDLEdBQ0ZWLFdBQVksU0FBVUMsR0FDcEIsTUFBT0EsR0FBR00sV0FBYSxHQUd6QkwsT0FBUSxTQUFVRCxHQUNoQkEsRUFBR00sVUFBWSxJQUlmSSxHQUNGWCxXQUFZLFNBQVVDLEdBQ3BCLE1BQU9BLEdBQUdXLFdBQWFYLEVBQUdZLFlBQWMsR0FBS1osRUFBR2EsYUFHbERaLE9BQVEsU0FBVUQsR0FDaEJBLEVBQUdXLFdBQWFYLEVBQUdhLGNBSW5CQyxHQUNGZixXQUFZLFNBQVVDLEdBQ3BCLE1BQU9BLEdBQUdXLFlBQWMsR0FHMUJWLE9BQVEsU0FBVUQsR0FDaEJBLEVBQUdXLFdBQWEsSUFJaEJ6QixFQUFTbkIsRUFBUW1CLE9BQU8sbUJBRTVCRCxHQUFnQkMsRUFBUSxhQUFjbUIsR0FDdENwQixFQUFnQkMsRUFBUSxnQkFBaUJ1QixHQUN6Q3hCLEVBQWdCQyxFQUFRLG1CQUFvQm1CLEdBQzVDcEIsRUFBZ0JDLEVBQVEsaUJBQWtCNEIsR0FDMUM3QixFQUFnQkMsRUFBUSxrQkFBbUJ3QixJQUUzQzNDIiwiZmlsZSI6InNjcm9sbGdsdWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbmFtZSBBbmd1bGFyIFNjcm9sbCBHbHVlclxuICogQHR5cGUgQW5ndWxhciBKUyBNb2R1bGVcbiAqIEB2ZXJzaW9uIDIuMC42XG4gKiBAYXV0aG9yIFNhbnRpYWdvIEcuIE1hcsOtbiA8c2FudGlhZ29AZmluYWxkZXZzdHVkaW8uY29tPlxuICogQGRlc2NyaXB0aW9uIEFuIEFuZ3VsYXJKcyBkaXJlY3RpdmUgdGhhdCBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG8gdGhlIGJvdHRvbVxuICogICBvZiBhbiBlbGVtZW50IG9uIGNoYW5nZXMgaW4gaXQncyBzY29wZS4gVGhpcyBpcyBhIGZvcmsgb2YgTHVrYXMgV2VnbWFubidzXG4gKiAgIEFuZ3VsYXIgU2Nyb2xsIEdsdWUgKGh0dHBzOi8vZ2l0aHViLmNvbS9MdWVnZy9hbmd1bGFyanMtc2Nyb2xsLWdsdWUpLlxuICogQGxpY2Vuc2UgTUlUXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGdvZ20vbmctc2Nyb2xsLWdsdWVyXG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBjcmVhdGVBY3RpdmF0aW9uU3RhdGUoJHBhcnNlLCBhdHRyLCBzY29wZSkge1xuICAgIGZ1bmN0aW9uIHVuYm91bmRTdGF0ZShpbml0VmFsdWUpIHtcbiAgICAgIHZhciBhY3RpdmF0ZWQgPSBpbml0VmFsdWU7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGl2YXRlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgYWN0aXZhdGVkID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lV2F5QmluZGluZ1N0YXRlKGdldHRlciwgc2NvcGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcihzY29wZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uICgpIHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHR3b1dheUJpbmRpbmdTdGF0ZShnZXR0ZXIsIHNldHRlciwgc2NvcGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcihzY29wZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gZ2V0dGVyKHNjb3BlKSkge1xuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGF0dHIgIT09IFwiXCIpIHtcbiAgICAgIHZhciBnZXR0ZXIgPSAkcGFyc2UoYXR0cik7XG5cbiAgICAgIGlmIChnZXR0ZXIuYXNzaWduICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHR3b1dheUJpbmRpbmdTdGF0ZShnZXR0ZXIsIGdldHRlci5hc3NpZ24sIHNjb3BlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvbmVXYXlCaW5kaW5nU3RhdGUoZ2V0dGVyLCBzY29wZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmJvdW5kU3RhdGUodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRGlyZWN0aXZlKG1vZHVsZSwgYXR0ck5hbWUsIGRpcmVjdGlvbikge1xuICAgIG1vZHVsZS5kaXJlY3RpdmUoYXR0ck5hbWUsIFtcbiAgICAgICckcGFyc2UnLCAnJHdpbmRvdycsICckdGltZW91dCcsXG5cbiAgICAgIGZ1bmN0aW9uICgkcGFyc2UsICR3aW5kb3csICR0aW1lb3V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsICRlbCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHZhciBhY3RpdmF0aW9uU3RhdGUgPSBjcmVhdGVBY3RpdmF0aW9uU3RhdGUoJHBhcnNlLCBhdHRyc1thdHRyTmFtZV0sIHNjb3BlKTtcbiAgICAgICAgICAgIHZhciBlbCA9ICRlbFswXTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc2Nyb2xsSWZHbHVlZCgpIHtcbiAgICAgICAgICAgICAgaWYgKGFjdGl2YXRpb25TdGF0ZS5nZXRWYWx1ZSgpICYmICFkaXJlY3Rpb24uaXNBdHRhY2hlZChlbCkpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24uc2Nyb2xsKGVsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goc2Nyb2xsSWZHbHVlZCk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KHNjcm9sbElmR2x1ZWQsIDAsIGZhbHNlKTtcblxuICAgICAgICAgICAgJHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzY3JvbGxJZkdsdWVkLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICRlbC5iaW5kKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGFjdGl2YXRpb25TdGF0ZS5zZXRWYWx1ZShkaXJlY3Rpb24uaXNBdHRhY2hlZChlbCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIF0pO1xuICB9XG5cbiAgdmFyIGJvdHRvbSA9IHtcbiAgICBpc0F0dGFjaGVkOiBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIC8vICsgMSBjYXRjaGVzIG9mZiBieSBvbmUgZXJyb3JzIGluIGNocm9tZVxuICAgICAgcmV0dXJuIGVsLnNjcm9sbFRvcCArIGVsLmNsaWVudEhlaWdodCArIDEgPj0gZWwuc2Nyb2xsSGVpZ2h0O1xuICAgIH0sXG5cbiAgICBzY3JvbGw6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuc2Nyb2xsVG9wID0gZWwuc2Nyb2xsSGVpZ2h0O1xuICAgIH1cbiAgfTtcblxuICB2YXIgdG9wID0ge1xuICAgIGlzQXR0YWNoZWQ6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsLnNjcm9sbFRvcCA8PSAxO1xuICAgIH0sXG5cbiAgICBzY3JvbGw6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJpZ2h0ID0ge1xuICAgIGlzQXR0YWNoZWQ6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsLnNjcm9sbExlZnQgKyBlbC5jbGllbnRXaWR0aCArIDEgPj0gZWwuc2Nyb2xsV2lkdGg7XG4gICAgfSxcblxuICAgIHNjcm9sbDogZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5zY3JvbGxMZWZ0ID0gZWwuc2Nyb2xsV2lkdGg7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsZWZ0ID0ge1xuICAgIGlzQXR0YWNoZWQ6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsLnNjcm9sbExlZnQgPD0gMTtcbiAgICB9LFxuXG4gICAgc2Nyb2xsOiBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLnNjcm9sbExlZnQgPSAwO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ25nU2Nyb2xsR2x1ZXInLCBbXSk7XG5cbiAgY3JlYXRlRGlyZWN0aXZlKG1vZHVsZSwgJ3Njcm9sbEdsdWUnLCBib3R0b20pO1xuICBjcmVhdGVEaXJlY3RpdmUobW9kdWxlLCAnc2Nyb2xsR2x1ZVRvcCcsIHRvcCk7XG4gIGNyZWF0ZURpcmVjdGl2ZShtb2R1bGUsICdzY3JvbGxHbHVlQm90dG9tJywgYm90dG9tKTtcbiAgY3JlYXRlRGlyZWN0aXZlKG1vZHVsZSwgJ3Njcm9sbEdsdWVMZWZ0JywgbGVmdCk7XG4gIGNyZWF0ZURpcmVjdGl2ZShtb2R1bGUsICdzY3JvbGxHbHVlUmlnaHQnLCByaWdodCk7XG5cbn0oYW5ndWxhcikpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9